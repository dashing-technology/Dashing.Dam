"PCVAIE1hc3RlciBMYW5ndWFnZT0iQyMiIEF1dG9FdmVudFdpcmV1cD0idHJ1ZSIgQ29kZUJlaGluZD0iVGhlbWVkUGFnZUZ1bGxXaWR0aC5tYXN0ZXIuY3MiIEluaGVyaXRzPSJ1U3RvcmUuUGFnZUxheW91dC5UaGVtZWRQYWdlRnVsbFdpZHRoIiAlPg0KPCVAIFJlZ2lzdGVyIFRhZ1ByZWZpeD0iZ2xkWG1wRXh0IiBUYWdOYW1lPSJlV2F5RXh0IiBTcmM9Ii91U3RvcmUvY3VzdG9tLWhlYWRlcnMvZ2xkLWV6eXBheS1leHQvZVdheS5hc2N4IiAlPg0KPCVAIFJlZ2lzdGVyIFRhZ1ByZWZpeD0idVN0b3JlIiBUYWdOYW1lPSJNZXRhVGFncyIgU3JjPSJ+L1VDb250cm9scy9NZXRhVGFncy5hc2N4IiAlPg0KPCVAIFJlZ2lzdGVyIFRhZ1ByZWZpeD0idVN0b3JlIiBUYWdOYW1lPSJXZWJFbmhhbmNlckJ1dHRvbiIgU3JjPSJ+L1VDb250cm9scy9XZWJFbmhhbmNlckJ1dHRvbi5hc2N4IiAlPg0KDQo8IWRvY3R5cGUgaHRtbD4NCjxodG1sPg0KPGhlYWQ+DQogICAgPHVTdG9yZTpNZXRhVGFncyBJRD0iTWV0YVRhZ3MiIHJ1bmF0PSJzZXJ2ZXIiIC8+DQogICAgPGxpbmsgaHJlZj0iPCU9IERlZmF1bHRTdHlsZVBhdGggJT4iIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIC8+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSI8JT0gU3RvcmVTdHlsZSAlPiIgdHlwZT0idGV4dC9jc3MiIC8+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSI8JT0gU3RvcmVTdHlsZVBhdGggJT5SYWRTa2lucy9EZWZhdWx0L0dyaWQuRGVmYXVsdC5jc3MiIHR5cGU9InRleHQvY3NzIiAvPiAgICANCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9IjwlPSBTdG9yZVN0eWxlUGF0aCAlPlJhZFNraW5zL0RlZmF1bHQvVHJlZVZpZXcuRGVmYXVsdC5jc3MiIHR5cGU9InRleHQvY3NzIiAvPiAgICANCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9IjwlPSBTdG9yZVN0eWxlUGF0aCAlPlJhZFNraW5zL0RlZmF1bHQvQ2FsZW5kYXIuRGVmYXVsdC5jc3MiIHR5cGU9InRleHQvY3NzIiAvPiANCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9IjwlPSBTdG9yZVN0eWxlUGF0aCAlPlJhZFNraW5zL0RlZmF1bHQvTWVudS5EZWZhdWx0LmNzcyIgdHlwZT0idGV4dC9jc3MiIC8+IA0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iPCU9IFN0b3JlalF1ZXJ5U3R5bGUgJT4iIHR5cGU9InRleHQvY3NzIiAvPg0KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3VucGtnLmNvbS9zd2VldGFsZXJ0L2Rpc3Qvc3dlZXRhbGVydC5taW4uanMiPjwvc2NyaXB0Pg0KDQogICAgPGFzcDpDb250ZW50UGxhY2VIb2xkZXIgSUQ9ImNwaEh0bWxIZWFkZXIiIHJ1bmF0PSJzZXJ2ZXIiPjwvYXNwOkNvbnRlbnRQbGFjZUhvbGRlcj4NCiAgICA8dGl0bGU+PC90aXRsZT4gDQoNCjxzY3JpcHQgcnVuYXQ9InNlcnZlciIgbGFuZ3VhZ2U9ImMjIj4NCg0KCQ0KICAgIHB1YmxpYyBib29sIElzQ2hlY2tvdXRQYWdlDQogICAgew0KICAgICAgICBnZXQNCiAgICAgICAgew0KICAgICAgICAgICAgaWYoIFBhZ2UuUmVxdWVzdC5GaWxlUGF0aC5Db250YWlucygiL3VTdG9yZS9DaGVja291dFBheW1lbnRTdWJtaXNzaW9uLmFzcHgiKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIH0NCiAgICB9DQoNCiBwcml2YXRlIGJvb2wgSXNFV2F5Q2xlYXJpbmcoKQ0KICAgIHsNCiAgICAgICAgYm9vbCByZXN1bHQgPSBmYWxzZTsNCiAgICAgICAgc3RyaW5nIGNsZWFyaW5nID0gUmVxdWVzdFsiY3RsMDAkY3BoTWFpbkNvbnRlbnQkY3RsQ2xlYXJpbmdVc2VyRGF0YTEwMDExJHR4dENvc3RDZW50ZXIiXTsNCiAgICAgICAgaWYgKGNsZWFyaW5nLkNvbnRhaW5zKCJlV2F5IikpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgIH0NCjwvc2NyaXB0Pg0KPC9oZWFkPg0KPGJvZHk+DQogICAgPGFzcDpQbGFjZUhvbGRlciBJRD0icGxoV2FpdGluZ0RpdiIgcnVuYXQ9InNlcnZlciI+PC9hc3A6UGxhY2VIb2xkZXI+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iPCU9IFNjcmlwdHNQYXRoICU+IiA+PC9zY3JpcHQ+DQogICAgPGZvcm0gaWQ9ImZvcm0xIiBydW5hdD0ic2VydmVyIj4NCiAgICAgICAgPGFzcDpTY3JpcHRNYW5hZ2VyIElEPSJzY3JpcHRNYW5hZ2VyIiBydW5hdD0ic2VydmVyIiBFbmFibGVQYWdlTWV0aG9kcz0idHJ1ZSI+PC9hc3A6U2NyaXB0TWFuYWdlcj4NCgkJPHVTdG9yZTpXZWJFbmhhbmNlckJ1dHRvbiBJRD0iV2ViRW5oYW5jZXJCdXR0b24iIHJ1bmF0PSJzZXJ2ZXIiLz4NCgkJPGRpdiBpZD0iZnVsbHBhZ2UiIGNsYXNzPSJUaGVtZWRQYWdlZEZ1bGxXaWR0aE1hc3RlciI+DQoJCQkNCgkJCTxkaXYgaWQ9ImxvZ28iPjwvZGl2Pg0KDQogICAgICAgICAgICA8YXNwOkNvbnRlbnRQbGFjZUhvbGRlciBJRD0iY3BoU3RhbmRhcmRIZWFkZXIiIHJ1bmF0PSJzZXJ2ZXIiPjwvYXNwOkNvbnRlbnRQbGFjZUhvbGRlcj4NCg0KICAgICAgICAgICAgPGFzcDpDb250ZW50UGxhY2VIb2xkZXIgSUQ9ImNwaFdlbGNvbWUiIHJ1bmF0PSJzZXJ2ZXIiPjwvYXNwOkNvbnRlbnRQbGFjZUhvbGRlcj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDxhc3A6Q29udGVudFBsYWNlSG9sZGVyIElEPSJjcGhGbGFncyIgcnVuYXQ9InNlcnZlciI+PC9hc3A6Q29udGVudFBsYWNlSG9sZGVyPg0KDQogICAgICAgICAgICA8YXNwOkNvbnRlbnRQbGFjZUhvbGRlciBJRD0iY3BoQ3VycmVuY3kiIHJ1bmF0PSJzZXJ2ZXIiPjwvYXNwOkNvbnRlbnRQbGFjZUhvbGRlcj4NCg0KICAgICAgICAgICAgPGFzcDpDb250ZW50UGxhY2VIb2xkZXIgSUQ9ImNwaEN1c3RvbUhlYWRlciIgcnVuYXQ9InNlcnZlciI+PC9hc3A6Q29udGVudFBsYWNlSG9sZGVyPg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJzZWFyY2hhcmVhIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb250YWluZXJQYWdlUHJvZHVjdE5hbWUiIGNsYXNzPSJzdWJ0aXRsZVByb2R1Y3ROYW1lIiBydW5hdD0ic2VydmVyIiB2aXNpYmxlPSJ0cnVlIj48JT0gVGl0bGVQcm9kdWN0TmFtZSU+PC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iY29udGFpbmVyUGFnZVN1YlRpdGxlIiBjbGFzcz0ic3VidGl0bGUiICBydW5hdD0ic2VydmVyIj48JT0gUGFnZVN1YlRpdGxlICU+PC9kaXY+DQogICAgICAgICAgICAgICAgPGFzcDpDb250ZW50UGxhY2VIb2xkZXIgSUQ9ImNwaFByb2R1Y3RTZWFyY2giIHJ1bmF0PSJzZXJ2ZXIiPjwvYXNwOkNvbnRlbnRQbGFjZUhvbGRlcj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW5hcmVhRnVsbFdpZHRoIj4NCgkJPCUNCgkJaWYoSXNDaGVja291dFBhZ2UgJiYgU2Vzc2lvblsiU2hvd0N1c3RvbSJdICE9IG51bGwgJiYgKChib29sKSBTZXNzaW9uWyJTaG93Q3VzdG9tIl0gPT0gdHJ1ZSkpDQoJCXsNCgkJJT4NCgkJPGgxPkhlbGxvb29vb288L2gxPg0KCQk8JQ0KCQl9IGVsc2V7DQoJCSU+DQogICAgICAgICAgICAgICAgPGFzcDpDb250ZW50UGxhY2VIb2xkZXIgSUQ9ImNwaE1haW5Db250ZW50IiBydW5hdD0ic2VydmVyIj48L2FzcDpDb250ZW50UGxhY2VIb2xkZXI+DQoJCTwlfSU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbkFyZWFGb290ZXJGdWxsV2lkdGgiPg0KICAgICAgICAgICAgICAgIDxhc3A6Q29udGVudFBsYWNlSG9sZGVyIElEPSJjcGhNYWluQ29udGVudEZvb3RlciIgcnVuYXQ9InNlcnZlciI+PC9hc3A6Q29udGVudFBsYWNlSG9sZGVyPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgICAgIDwhLS0gRm9vdGVyIEFyZWEgU3RhcnQgLS0+ICAgICAgICAgICAgDQogICAgICAgICAgICA8ZGl2IGlkPSJtYXN0ZXJQYWdlRm9vdGVyIiBjbGFzcz0iY2xlYXJmbG9hdCI+PC9kaXY+ICAgICAgICAgICAgDQogICAgICAgICAgICA8YXNwOkNvbnRlbnRQbGFjZUhvbGRlciBJRD0iY3BoQ3VzdG9tRm9vdGVyIiBydW5hdD0ic2VydmVyIj48L2FzcDpDb250ZW50UGxhY2VIb2xkZXI+ICAgICAgICAgICAgDQogICAgICAgICAgICA8ZGl2IGlkPSJwb3N0Rm9vdGVyIj48L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9mb3JtPiAgIA0KPGdsZFhtcEV4dDplV2F5RXh0IHJ1bmF0PSJzZXJ2ZXIiIElEPSJlV2F5IiBQYXltZW50RW5kcG9pbnQ9Imh0dHBzOi8vYXBpLnNhbmRib3guZXdheXBheW1lbnRzLmNvbS9zb2FwLmFzbXgiIFVzZXJOYW1lPSJGOTgwMkNqY0lFQ0tFbytPMk04Z0h6VXFCeEVOZkYxMFYveXVpNzAzZG9IQmZtQUl5bW11VEk2eVo3ZGVTNlQ2U0Y2MEdRIiBQYXNzd29yZD0iQ3hWZHQyYTMiIENsZWFyaW5nRGlzcGxheU5hbWU9ImVXYXkiIC8+DQoNCjwvYm9keT4NCjwvaHRtbD4NCg=="